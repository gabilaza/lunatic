@page "/profile/{userId}"
@using Lunatic.UI.Contracts
@using Lunatic.UI.ViewModels
@using Lunatic.UI.Dtos
@using ProfileTemplates
@using MudBlazor
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IDialogService DialogService

<PageTitle>@UserModel.Username's profile</PageTitle>

<div class="d-flex justify-center">
	<h3 class="">@UserModel.Username's profile</h3>
</div>

<div class="d-flex justify-center">
	<MudCard style="width:500px; height: 250px" Class="d-inline-flex justify-content-around">
		<div style="width: 200px; height: 200px; margin: auto 0 auto 0">
			<MudImage ObjectFit="ObjectFit.Cover" Src="images/dog.jpg" Style="width: 100%; height: 100%; border-radius: 50%"></MudImage>
		</div>
		<div style = "margin: auto 0 auto 0">
			<MudText Typo="Typo.h4" Color="Color.Info">
				@UserModel.LastName @UserModel.FirstName
			</MudText>

			<MudText Typo="Typo.body2" Color="Color.Dark">
				@UserModel.Username
			</MudText>

			@if (CurrentUserId == Guid.Parse(UserId))
			{
				<MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" Class="mx-auto mt-5" OnClick="LaunchEditProfileModal">Edit Profile</MudButton>
			}
		</div>
	</MudCard>
</div>

@code {
	[Inject] public IUserDataService userDataService { get; set; } = null!;
	[Parameter] public string? UserId { get; set; }

	private Guid CurrentUserId { get; set; } = Guid.Empty;
	private UserDto UserModel { get; set; } = new UserDto();

}

@functions {
	protected override async Task OnParametersSetAsync()
	{
		var userData = await userDataService.GetUserByIdAsync(UserId);
		UserModel = userData.GetValue("user");
		CurrentUserId = new Guid(await localStorage.GetItemAsync<string>("userId"));
		base.OnParametersSet();
	}

	public void LaunchEditProfileModal()
	{
		DialogParameters parameters = new DialogParameters();
		parameters.Add("UserModel", UserModel);
		DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };
		DialogService.Show<UpdateUserDialog>("Edit profile", parameters, closeOnEscapeKey);
	}
}