@using MudBlazor
@inject ISnackbar Snackbar
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using Microsoft.AspNetCore.Components
@using Lunatic.UI.Contracts
@using System.Text.Json
@using Lunatic.UI.Pages.Teams.TeamPageComponents.Shared
@using Lunatic.UI.Pages.Teams.TeamPageComponents.ManageMembersModalComponents

<style>
	.member-management-toolbar {
		background-color: #9271bd;
		color: #ffffff;
	}

	.member-management-toolbar1 {
		background-color: #ebc8a9;
		color: #ffffff;
	}

	.member-management-toolbar2 {
		background-color: #ebd5a9;
		color: #ffffff;
	}
</style>

<MudPaper Width="80vw" Height="80vh">
	<MudPaper class="d-flex flex-column" style="height:100%">
		<MudToolBar Class="member-management-toolbar" Dense="true">
			<MudText Typo="Typo.subtitle1">Manage members</MudText>
			<MudSpacer />
			<MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Inherit" OnClick="() => MudDialog.Cancel()" />
		</MudToolBar>

		<MudGrid Spacing="0" style="height:100%;">
			<MudItem xs="12" sm="3">
				<MudPaper style="height:100%; max-height:100%; overflow-y:scroll; overflow-x:hidden;">
					<MudToolBar Class="member-management-toolbar1" Dense>Add Members</MudToolBar>
					<MudAutocomplete T="string" Label="Search users by username" SearchFunc="SearchUsers" Text="@searchValue2"
									 AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary">
					</MudAutocomplete>

					<MudPaper>
						@foreach (var searchResult in userItems) {
							<SearchUserComponent MemberId="@searchResult.UserId"
												 TeamOwnerId="@OwnerId"
												 Username="@searchResult.Username"
												 TeamId="@TeamId"
												 MembersIdsRef="@MembersIds" 
												 UpdateMemberList="@StateHasChanged"
												 />
						}
					</MudPaper>
				</MudPaper>
			</MudItem>

			<MudItem xs="12" sm="9">
				<MudPaper style="height:100%; max-height:100%; overflow-y:scroll; overflow-x:hidden;">
					<MudToolBar Class="member-management-toolbar2" Dense>Manage members</MudToolBar>
					<MudPaper style="max-height:100%; overflow-y:scroll; overflow-x:hidden;">
						@* TODO: scroll issues *@

						<MudPaper>
							@foreach (var memberId in MembersIds) {
								<TeamMemberComponent MemberId="@memberId.ToString()"
													 TeamOwnerId="@OwnerId" 
													 TeamId="@TeamId"
													 MembersIdsRef="@MembersIds"
													 UpdateMemberList="@StateHasChanged"/>
							}
						</MudPaper>
					</MudPaper>
				</MudPaper>
			</MudItem>

		</MudGrid>
	</MudPaper>

</MudPaper>

@code {
	[CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
	[Parameter] public string TeamId { get; set; } = null!;
	[Parameter] public string OwnerId { get; set; } = ""; // can access this modal only if owner
	[Parameter] public List<Guid> MembersIds { get; set; } = null;


	private List<UserItem>? userItems = new();

	private string searchValue = "";
	private string searchValue2 = "";
	private List<string> EmptyList = new List<string>();




	[Inject] IUserDataService UserDataService { get; set; } = null!;
}


@functions {

	protected override async Task OnInitializedAsync() {
		var currentUserId = await localStorage.GetItemAsync<string>("userId");

		if (currentUserId != OwnerId) {
			Snackbar.Add("You are not the owner of this team", Severity.Error);
			MudDialog.Cancel();
		}

		foreach (var memberId in MembersIds) {
			var user = await UserDataService.GetUserByIdAsync(memberId.ToString());
		}
	}

	public async Task<IEnumerable<string>> SearchUsers(string s) {

		if (s.Length < 3) {
			return EmptyList;
		}

		var result = await UserDataService.GetUsersByUsernameAsync(s);

		if (result != null) {
			userItems.Clear();
			foreach (var user in result) {
				userItems.Add(new UserItem(user.UserId.ToString(), user.Username));
				StateHasChanged();
				searchValue2 = s;
			}

		}

		return EmptyList;
	}
}
