@page "/team/{teamId}"
@using Lunatic.UI.Contracts
@using MudBlazor
@using Lunatic.UI.Pages.Teams.TeamPageTemplates
@inject NavigationManager navigationManager

<style>
	.custom-toolbar {
		background-color: #3498db;
		color: #ffffff;
	}
</style>

<MudPaper Height="100%" Class="pa-1 ma-2" Elevation="0">
	<MudGrid Spacing="1">

		<MudItem xs="12" md="9">
			<MudPaper Elevation="1">
				@* <MudPaper> *@
				<MudToolBar Class="custom-toolbar" Dense="true">
					<MudText>
						@TeamName
					</MudText>
					<MudSpacer />
					@* @if (ownerId==currentUserId) *@
					<MudMenu Icon="@Icons.Material.Filled.Settings" Color="Color.Inherit" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
						<MudMenuItem>
							@* OnClick="func" *@
							Delete team
						</MudMenuItem>
					</MudMenu>

				</MudToolBar>
				@* </MudPaper> *@
				<MudPaper Height="100%" Class="pa-1 d-flex flex-column gap-1">
					@if (ProjectIds != null && ProjectIds.Any()) {
						@foreach (var projectId in ProjectIds) {
							<TeamPageProjectCard CardId="@projectId.ToString()" OnCardClick="GoToProjectPage" />
						}
					}
					else {
						<p>No projects available.</p>
					}
				</MudPaper>
			</MudPaper>
		</MudItem>
		<MudItem xs="12" md="3">
			<MudPaper Height="100%">
				<MudPaper>
					<MudToolBar Class="custom-toolbar" Dense="true">
						<MudText>Members</MudText>
						<MudSpacer />
						<MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Inherit" />
					</MudToolBar>

					<MudList Clickable="true">
						@if (MembersIds != null && MembersIds.Any()) {
							@foreach (var memberId in MembersIds) {
								<TeamPageUserListItem UserId="@memberId.ToString()" OnCardClick="GoToUserPage" Username="User" />
							}
						}

					</MudList>
				</MudPaper>
			</MudPaper>
		</MudItem>
	</MudGrid>

</MudPaper>


@code {
	[Parameter]
	public string? TeamId { get; set; }

	public string TeamName { get; set; } = "";
	public string? TeamDescription { get; set; } = "";
	public string ownerId { get; set; } = "";
	public List<Guid>? MembersIds { get; set; } = null;
	private List<Guid>? ProjectIds { get; set; } = null;

	[Inject]
	public ITeamDataService TeamDataService { get; set; } = null!;

}


@functions {
	protected override void OnParametersSet() {
		base.OnParametersSet();
	}

	protected override async Task OnInitializedAsync() {
		var team = await TeamDataService.GetTeamByIdAsync(TeamId);
		TeamName = team.Name;
		TeamDescription = team.Description;
		MembersIds = new List<Guid>(team.MemberIds);
		ProjectIds = new List<Guid>(team.ProjectIds);

		
	}

	public void GoToProjectPage(string projectId) {
		navigationManager.NavigateTo("/project/" + projectId);
	}
	public void GoToUserPage(string userId) {
		navigationManager.NavigateTo("/user/" + userId);
	}

}
