@page "/team/{teamId}"
@using MudBlazor
@using Lunatic.UI.Contracts
@using Lunatic.UI.Pages.Teams.TeamPageComponents
@* @using System.Text.Json *@
@inject NavigationManager navigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<style>
	.custom-toolbar {
		background-color: #3498db;
		color: #ffffff;
	}
	.my-custom-class {
		backdrop-filter: blur(10px);
	}
</style>

<MudPaper Height="100%" Class="p-2 mr-n2" Elevation="0">
	 @* <MudPaper > *@

	
	<MudGrid Spacing="1" style="height:100%;" >

		<MudItem xs="12" md="9">
			<MudPaper Elevation="1">
				<MudToolBar Class="custom-toolbar" Dense="true">
					<MudText>
						@TeamName
					</MudText>
					<MudSpacer />
					@* @if (ownerId==currentUserId) *@
					<MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="LaunchAddNewProjectModal">
						NEW PROJECT
					</MudButton>
					<MudMenu Icon="@Icons.Material.Filled.Settings" Color="Color.Inherit" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
						<MudMenuItem OnClick="LaunchEditTeamInfoModal">
							Edit team info
						</MudMenuItem>
						<MudMenuItem OnClick="LaunchDeleteTeamModal">
							Delete team  @* leave team if non owner *@
						</MudMenuItem>
					</MudMenu>

				</MudToolBar>

				<MudPaper Height="100%" Class="pa-1 d-flex flex-column gap-1">
					@if (ProjectIds != null) {
						@if (ProjectIds.Any()) {
							@foreach (var projectId in ProjectIds) {
								<TeamPageProjectCard CardId="@projectId.ToString()" OnCardClick="GoToProjectPage" />
							}
						}
						else {
							<MudCard>
								<MudCardContent>
									<MudText Typo="Typo.body2">No projects yet</MudText>
								</MudCardContent>
							</MudCard>
						}

					}
					else {
						<MudCard>
							<MudCardContent>
								<MudSkeleton Width="150px" Height="40px" />
								<MudSkeleton />
							</MudCardContent>
						</MudCard>
					}
				</MudPaper>
			</MudPaper>
		</MudItem>
		<MudItem xs="12" md="3" style="flex: 1; display: flex; flex-direction: column;">
			<MudPaper Height="100%">
				<MudPaper>
					<MudToolBar Class="custom-toolbar" Dense="true">
						<MudText>Members</MudText>
						<MudSpacer />
						<MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Inherit" OnClick="LaunchAddMemberModal" />
					</MudToolBar>

					<MudList Clickable="true">
						@if (MembersIds != null) {
							@foreach (var memberId in MembersIds) {
								<TeamPageUserListItem UserId="@memberId.ToString()" OnCardClick="GoToUserPage" />
							}
						}
						else {
							<MudListItem>
								<MudPaper Elevation="0" Class="d-flex flex-row">
									<MudSkeleton SkeletonType="SkeletonType.Circle" Width="50px" Height="50px" />
									<MudSkeleton Width="150px" Height="40px" />
								</MudPaper>
							</MudListItem>
						}
					</MudList>
				</MudPaper>
			</MudPaper>
		</MudItem>
	</MudGrid>
	</MudPaper>
@* </MudPaper> *@

<MudDialog @bind-IsVisible="visible" Options="dialogOptions">
	<TitleContent>Are you sure you want to delete this team?</TitleContent>
	<DialogContent>

	</DialogContent>
	<DialogActions>
		<MudButton OnClick="SubmitDeleteTeam" Color="Color.Primary">Yes</MudButton>
		<MudButton OnClick="CancelDeleteTeam" Color="Color.Secondary">No</MudButton>
	</DialogActions>
</MudDialog>

@code {
	[Parameter] public string? TeamId { get; set; }

	public string TeamName { get; set; } = "";
	public string TeamDescription { get; set; } = "";
	public string OwnerId { get; set; } = "";
	public List<Guid>? MembersIds { get; set; } = null;
	private List<Guid>? ProjectIds { get; set; } = null;

	[Inject] public ITeamDataService TeamDataService { get; set; } = null!;

	private bool visible;
	private DialogOptions dialogOptions = new();

}


@functions {
	private void LaunchDeleteTeamModal() {
		visible = true;
	}
	private async Task SubmitDeleteTeam() {
		var result = await TeamDataService.DeleteTeamAsync(TeamId);
		if (result.Success) {
			Snackbar.Add($"Team {TeamName} deleted successfuly", Severity.Success);
			visible = false;
			navigationManager.NavigateTo("/teams");
		}
		else {
			Snackbar.Add($"Failed to delete team {result.Message}", Severity.Error);
		}

	}
	private void CancelDeleteTeam() => visible = false;

	protected override async Task OnParametersSetAsync() {

		var result = await TeamDataService.GetTeamByIdAsync(TeamId);
		if (!result.Success) {
			Snackbar.Add($"Error loading team: {result.Message}", Severity.Error);
			navigationManager.NavigateTo("/teams");
		}
		var team = result.GetValue("team");
		// Console.WriteLine(JsonSerializer.Serialize(team));
		TeamName = team.Name;
		TeamDescription = team.Description;
		OwnerId = team.OwnerId;
		MembersIds = team.MemberIds;
		ProjectIds = team.ProjectIds;


	}

	public void GoToProjectPage(string projectId) {
		navigationManager.NavigateTo("/project/" + projectId);
	}
	public void GoToUserPage(string userId) {
		navigationManager.NavigateTo("/user/" + userId);
	}

	public void LaunchAddMemberModal() {
		DialogParameters parameters = new DialogParameters();
		parameters.Add("OwnerId", OwnerId);
		parameters.Add("MembersIds", MembersIds);
		parameters.Add("TeamId", TeamId); //todo dropshadow
		DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true, ClassBackground = "my-custom-class", NoHeader = true, MaxWidth = MaxWidth.ExtraExtraLarge, DisableBackdropClick = true };
		DialogService.Show<TeamPageManageMembersModal>(null, parameters, closeOnEscapeKey);
	}
	public void LaunchEditTeamInfoModal() {
		DialogParameters parameters = new DialogParameters();
		parameters.Add("OwnerId", OwnerId);
		parameters.Add("TeamId", TeamId);
		parameters.Add("TeamName", TeamName);
		parameters.Add("TeamDescription", TeamDescription);
		DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true, ClassBackground = "my-custom-class", NoHeader = true, MaxWidth = MaxWidth.ExtraExtraLarge };
		DialogService.Show<TeamPageEditInfoModal>(null, parameters, closeOnEscapeKey);
	}
	public void LaunchAddNewProjectModal() {
		DialogParameters parameters = new DialogParameters();
		parameters.Add("OwnerId", OwnerId);
		parameters.Add("TeamId", TeamId);
		parameters.Add("ProjectIds", ProjectIds);
		// parameters.Add("UpdateProjectList", );
		DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true, ClassBackground = "my-custom-class", NoHeader = true, MaxWidth = MaxWidth.Large };
		DialogService.Show<TeamPageAddNewProjectModal>(null, parameters, closeOnEscapeKey);
	}
	// public void LaunchDeleteTeamModal() {
	// 	DialogParameters parameters = new DialogParameters();
	// 	parameters.Add("OwnerId", OwnerId);
	// 	parameters.Add("TeamId", TeamId);
	// 	DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true, ClassBackground = "my-custom-class", NoHeader = true, MaxWidth = MaxWidth.Small };
	// 	DialogService.Show<TeamPageDeleteTeamModal>(null, parameters, closeOnEscapeKey);
		// }
}
