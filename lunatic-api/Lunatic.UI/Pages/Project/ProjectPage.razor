@page "/project/{projectId}"
@using MudBlazor
@using Lunatic.UI.Contracts
@using Lunatic.UI.Models.Dtos
@using Lunatic.UI.Models.ViewModels
@using Lunatic.UI.Models.Shared
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@inject ISnackbar Snackbar

<style>
	.project-toolbar {
		background-color: #9271bd;
		color: #ffffff;
	}

	.background {
		background-color: #e4e6eb;
	}
</style>

<MudPaper Height="100%" Class="p-2 d-flex flex-column flex-grow-1 " Elevation="0">
	<MudToolBar Class="project-toolbar" Dense="true">
		<MudText Typo="Typo.subtitle1">
			@CurrentProject.Title
		</MudText>
		<MudIconButton Icon="@Icons.Material.Filled.ExpandCircleDown"
					   aria-label="delete"
					   OnClick="()=>{isOpenDescriptionPopover=!isOpenDescriptionPopover;}" />

		<MudPopover Open="isOpenDescriptionPopover"
					OverflowBehavior="OverflowBehavior.FlipAlways"
					AnchorOrigin="Origin.BottomLeft"
					TransformOrigin="Origin.TopLeft"
					Paper="false">
			<MudPaper Outlined="true" Class="px-4 py-8 overflow-auto mud-background-gray" MaxHeight="60vh" MaxWidth="80vw" MinWidth="50vw" MinHeight="20vh">
				<MudText>
					@* TODO: SWITCH TO MARKDOWN *@
					@foreach (var sub in @CurrentProject.Description.Split('\n')) {
						@sub <br />
					}
				</MudText>
			</MudPaper>
		</MudPopover>

		<MudSpacer />

		<MudButtonGroup Color="Color.Default" Size="Size.Small" Variant="Variant.Outlined">
			<MudButton Class="pr-4 pl-4" OnClick="DisplayAddTaskModal">
				Add Task
			</MudButton>
			<MudButton OnClick="()=>isAddSectionModalVisible=true">
				Add Section
			</MudButton>
		</MudButtonGroup>

		<MudSpacer />

		<MudMenu Icon="@Icons.Material.Filled.Settings" Color="Color.Inherit" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
			<MudMenuItem OnClick="LaunchEditProjectInfoModal">
				Edit project info
			</MudMenuItem>
			@*  if owner *@
			<MudMenuItem OnClick="LaunchDeleteProjectModal">
				Delete project
			</MudMenuItem>
		</MudMenu>

	</MudToolBar>

	<MudDropContainer T="TaskItem"
					  @ref="dropContainer"
					  Items="@Tasks"
					  ItemsSelector="@((item,column) => item.SectionLocation == column)"
					  ItemDropped="TaskUpdated"
					  Class="flex-grow-1 d-flex flex-row background">
		<ChildContent>
			@if (TaskSections.Count == 0) {
				@if (pageLoaded) {
					<MudPaper Class="d-flex flex-column background" Width="100%" Height="100%">
						<MudText Align="Align.Center" Typo="Typo.h6" Class="pt-2">
							No Sections have been added yet.<br />Create one by clicking on the <b>Add Section</b> button above.
						</MudText>
					</MudPaper>
				}
			}
			else {
				<MudPaper Class="d-flex flex-row background overflow-x-auto" Width="100%" Height="100%">

					@foreach (var item in TaskSections) {
						<MudPaper Elevation="0"
								  Width="20em" MinWidth="20em"
								  MinHeight="30em" MaxHeight="calc(100vh - 10em)"
								  Class="pa-2 ma-4 d-flex flex-column mud-background-gray rounded-lg">
							<MudToolBar DisableGutters="true" Dense Style="height:2.5em">
									@if (!@item.isEditingCategory) {
									<MudText Typo="Typo.subtitle1" Class="pl-2"><b>@item.Name</b></MudText>
									<MudSpacer />
									<MudMenu Icon="@Icons.Material.Rounded.MoreHoriz"
											 AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight"
											 ListClass="pa-2 d-flex flex-column"
											 PopoverClass="mud-elevation-25">
										<MudButton Size="Size.Small"
												   Color="Color.Error"
												   StartIcon="@Icons.Material.Outlined.Delete"
												   OnClick="@(() => LaunchDeleteSectionModal(item))">Delete Section	</MudButton>
										@* var globala -> modal/popover cu warning! *@
										<MudButton Size="Size.Small"
												   Color="Color.Default"
												   StartIcon="@Icons.Material.Rounded.Edit"
												   OnClick="@(()=>item.isEditingCategory=true)">	Rename Section</MudButton>
									</MudMenu>
								}
								else {
									if (editCategoryNameStr == null) {
										editCategoryNameStr = item.Name;
									}
									<MudTextField T="string"
												  Margin="Margin.Dense"
												  Text="@item.TempName"
												  Style="padding:0; margin:0"
												  @bind-Value="@item.TempName"
												  Adornment="Adornment.End"
												  AdornmentIcon="@Icons.Material.Filled.Check"
												  OnAdornmentClick="@(() => {
														item.Name = item.TempName;
														item.isEditingCategory=false;
														})" />
								}
							</MudToolBar>

							<MudDropZone T="TaskItem" Identifier="@item.Name" Class="mud-height-full overflow-scroll" />

						</MudPaper>
					}


				</MudPaper>
			}
		</ChildContent>
		<ItemRenderer>
			<MudPaper Elevation="25" Class="pa-2 rounded-lg my-2 d-flex flex-row justify-space-between">
				@context.Name
				<MudButton>view</MudButton>
			</MudPaper>
		</ItemRenderer>
	</MudDropContainer>


</MudPaper>


@* ADD NEW SECTION MODAL *@
<MudDialog @bind-IsVisible="isAddSectionModalVisible" Options="noEscapeModalOpts">
	<TitleContent>
		<MudText Typo="Typo.body1">
			<MudIcon Icon="@Icons.Material.Filled.AddCard" Class="mr-3" /> Add new section
		</MudText>
	</TitleContent>
	<DialogContent>
		<MudPaper Width="25em" Class="m-0 mt-n5" Elevation="0">
			<MudTextField T="string"
						  Label="Section name"
						  HelperText="You can edit it later"
						  Required="true"
						  Immediate="true"
						  @bind-Value="addSectionName" />
		</MudPaper>
	</DialogContent>
	<DialogActions>
		<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddNewSection" Class="px-10">Add</MudButton>
		<MudButton Variant="Variant.Outlined" Color="Color.Default" OnClick="()=>isAddSectionModalVisible=false">Cancel</MudButton>
	</DialogActions>
</MudDialog>

@* ADD NEW TASK MODAL *@
<MudDialog @bind-IsVisible="isAddTaskModalVisible" Options="noEscapeModalOpts">
	<TitleContent>
		<MudText Typo="Typo.body1">
			<MudIcon Icon="@Icons.Material.Filled.AddCard" Class="mr-3" /> Add new Task
		</MudText>
	</TitleContent>
	<DialogContent>
		<MudPaper Width="40em" Class="m-0 mt-n4 d-flex flex-column" Elevation="0">
			<MudTextField T="string"
						  Label="Task name"
						  HelperText="You can edit it later"
						  Required="true"
						  Immediate="true"
						  @bind-Value="TaskViewModel.Title" />

			<MudTextField T="string"
						  Label="Task description"
						  @bind-Value="TaskViewModel.Description"
						  Lines="5"
						  HelperText="Accepts Markdown" />


			<MudDateRangePicker @bind-DateRange="AddTaskModalDateRange"
								Label="Pick the planned start and end date"
								DisableToolbar="true"
								AutoClose="true" />

			<MudPaper Class="d-flex flex-row align-end gap-3" Elevation="0">
				<MudText>Priority</MudText>
				<MudPaper Elevation="0" Width="6em">
					<MudSelect T="string" Dense="true" @bind-Value="addTaskModalPriorityOption">
						@foreach (var priority in priorityOptions) {
							<MudSelectItem T="string" Value="@priority">@priority</MudSelectItem>
						}
					</MudSelect>
				</MudPaper>
			</MudPaper>

			<MudPaper Class="d-flex flex-row align-end gap-3 mb-2 lex-grow-1" Elevation="0">
				<MudText>Place Task in</MudText>
				<MudPaper Elevation="0" Class="flex-grow-1">
					<MudSelect @bind-Value="addTaskModalFirstSelectOption" Dense="true">
						@foreach (var item in TaskSections) {
							<MudSelectItem T="string" Value="@item.Name">@item.Name</MudSelectItem>
						}
					</MudSelect>
				</MudPaper>
			</MudPaper>

			<MudSelect MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))"
					   MultiSelection="true"
					   @bind-SelectedValues="AddTaskModalAssigneeOptions"
					   T="string"
					   Label="Asignees"
					   AdornmentIcon="@Icons.Material.Filled.PersonAddAlt1"
					   AdornmentColor="Color.Primary"
					   AnchorOrigin="Origin.BottomCenter">

				@foreach (var member in TeamMembers) {
					<MudSelectItem T="string" Value="@member.Item2">@member.Item3 (@member.Item2)</MudSelectItem>
				}
			</MudSelect>

			<MudTextField T="string"
						  Label="Tags"
						  @bind-Value="AddTaskModalTagsString"
						  HelperText="Separate the tags using commas" />

			<MudText Typo="Typo.caption" Class="mt-4">
				Note: The task's status will be marked as <b>Created</b>. Later it can be changed to <b>In Progress</b> or <b>Done</b>.
			</MudText>
		</MudPaper>

	</DialogContent>
	<DialogActions>
		<MudButton Variant="Variant.Filled"
				   Color="Color.Primary"
				   OnClick="AddNewTaskAsync" Class="px-10">Add</MudButton>

		<MudButton Variant="Variant.Outlined"
				   Color="Color.Default"
				   OnClick="()=>{isAddTaskModalVisible=false;
								AddTaskModalAssigneeOptions = new HashSet<string>();}">Cancel</MudButton>
	</DialogActions>
</MudDialog>


@* DELETE SECTION MODAL *@
<MudDialog @bind-IsVisible="isOpenDeleteSectionModal" Options="noEscapeModalOpts">
	@* dialog for deletion of section *@
	<TitleContent>
		<MudText Typo="Typo.body1">
			<MudIcon Icon="@Icons.Material.Filled.AddCard" Class="mr-3" /> Delete Section
		</MudText>
	</TitleContent>
	<DialogContent>
		<MudPaper Width="30em" Class="m-0 mt-n2" Elevation="0">
			<MudText Typo="Typo.body1">
				Are you sure you want to delete the section <b>@TempSectionToDeleteFromModal.Name</b>?<br />
			</MudText>
			@* <MudText Typo="Typo.body2">All tasks in this section will be deleted.</MudText> *@
			<MudAlert Severity="Severity.Warning" Class="pl-0">
				All tasks in this section will be deleted!
			</MudAlert>
		</MudPaper>
	</DialogContent>
	<DialogActions>
		<MudButton Variant="Variant.Filled"
				   Color="Color.Primary"
				   OnClick="()=>DeleteSection()">Delete</MudButton>
		<MudButton Variant="Variant.Outlined"
				   Color="Color.Default"
				   OnClick="()=>{TempSectionToDeleteFromModal=null; isOpenDeleteSectionModal=false;}">Cancel</MudButton>
	</DialogActions>
</MudDialog>

@code {
	[Parameter] public string ProjectId { get; set; } = null!;
	public ProjectDto CurrentProject { get; set; } = new();
	public List<Tuple<Guid, string, string>> TeamMembers { get; set; } = new();

	private bool pageLoaded = false;

	//for project description popover
	private bool isOpenDescriptionPopover = false;

	private string? editCategoryNameStr = null;

	public DialogOptions noEscapeModalOpts = new() { DisableBackdropClick = true };

	private bool isAddSectionModalVisible = false;
	private string addSectionName = "";

	private TaskViewModel TaskViewModel { get; set; } = new();
	private string AddTaskModalTagsString { get; set; } = "";
	private DateRange AddTaskModalDateRange { get; set; } = new();
	private bool isAddTaskModalVisible = false;
	private string addTaskModalFirstSelectOption = "";
	private IEnumerable<string> AddTaskModalAssigneeOptions { get; set; } = new HashSet<string>();
	private static readonly string[] priorityOptions = { "Low", "Medium", "High" };
	private string addTaskModalPriorityOption = "";

	//vars for drag and drop
	private MudDropContainer<TaskItem>? dropContainer;


	public class TaskSection {
		public string Name { get; set; }
		public string TempName { get; set; }//used when editing the section's title
		public bool isEditingCategory { get; set; } = false;

		public TaskSection(string name) {
			Name = name;
			TempName = name;
		}
	}
	public class TaskItem {
		public string Name { get; set; }
		public string SectionLocation { get; set; }

		public TaskItem(string name, string sectionLocation) {
			Name = name;
			SectionLocation = sectionLocation;
		}
	}

	private List<TaskSection> TaskSections { get; init; } = new();
	private List<TaskItem> Tasks { get; init; } = new(); //todo check if init is needed

	private bool isOpenDeleteSectionModal = false;
	private TaskSection? TempSectionToDeleteFromModal { get; set; } = null;

	[Inject] public IProjectDataService ProjectDataService { get; set; } = null!;
	[Inject] public ITeamDataService TeamDataService { get; set; } = null!;
}

@functions {

	protected override async Task OnInitializedAsync() {
		var response = await ProjectDataService.GetProjectByIdAsync(ProjectId);
		if (!response.Success) {
			return;
		}
		CurrentProject = response.GetValue("project");

		TaskSections.Add(new TaskSection("To Do"));
		TaskSections.Add(new TaskSection("In progress"));
		// foreach (var section in CurrentProject.TaskSections) {
		// 	TaskSections.Add(new TaskSection(section));
		// }

		var usersResponse = await TeamDataService.GetTeamMembersAsync(CurrentProject.TeamId);
		if (!usersResponse.Success) {
			return;
		}
		var users = usersResponse.GetValue("members");
		TeamMembers = users.Select(x => new Tuple<Guid, string, string>(x.UserId, x.Username, x.FirstName + " " + x.LastName)).ToList();

		pageLoaded = true;
	}

	private string GetMultiSelectionText(List<string> selectedValues) {
		if (selectedValues.Count == 0) {
			return "No assignees selected";
		}
		return $"Assignee{(selectedValues.Count > 1 ? "s" : "")}: {string.Join(", ", selectedValues.Select(x => x))}";
	}

	private void DisplayAddTaskModal() {
		if (TaskSections.Count == 0) {
			Snackbar.Add($"You need to add at least one section first", Severity.Error);
			return;
		}
		addTaskModalFirstSelectOption = TaskSections.First().Name;
		isAddTaskModalVisible = true;
	}

	private async Task AddNewSection() {
		if (string.IsNullOrEmpty(addSectionName)) {
			Snackbar.Add($"Section name cannot be empty", Severity.Error);
			return;
		}

		addSectionName = string.Empty;
		isAddSectionModalVisible = false;

		// var response = await ProjectDataService.AddSectionAsync(ProjectId, addSectionName);
		// if (!response.Success) {
		// 	Snackbar.Add($"Failed to create section: {response.GetErrorsString()}", Severity.Error);
		// 	return;
		// }
		TaskSections.Add(new TaskSection(addSectionName));
	}

	private void TaskUpdated(MudItemDropInfo<TaskItem> info) {
		info.Item.SectionLocation = info.DropzoneIdentifier;
	}

	private async Task AddNewTaskAsync() {
		if (string.IsNullOrWhiteSpace(TaskViewModel.Title)) {
			Snackbar.Add($"Task name cannot be empty", Severity.Error);
			return;
		}
		if (string.IsNullOrWhiteSpace(TaskViewModel.Description)) {
			Snackbar.Add($"Task description cannot be empty", Severity.Error);
			return;
		}
		if (AddTaskModalDateRange.Start == null || AddTaskModalDateRange.End == null) {
			Snackbar.Add($"Task planned start and end date cannot be empty", Severity.Error);
			return;
		}
		if (string.IsNullOrWhiteSpace(addTaskModalPriorityOption)) {
			Snackbar.Add($"Task priority cannot be empty", Severity.Error);
			return;
		}
		if (AddTaskModalAssigneeOptions.Count() == 0) {
			Snackbar.Add($"Task must have at least one assignee", Severity.Error);
			return;
		}

		TaskViewModel.ProjectId = ProjectId;
		TaskViewModel.Tags = AddTaskModalTagsString.Split(',').Select(x => x.Trim()).ToList();
		TaskViewModel.Priority = addTaskModalPriorityOption switch {
			"Low" => TaskPriority.LOW,
			"Medium" => TaskPriority.MEDIUM,
			"High" => TaskPriority.HIGH,
			_ => TaskPriority.LOW
		};

		TaskViewModel.Status = Models.Shared.TaskStatus.CREATED;
		TaskViewModel.PlannedStartDate = AddTaskModalDateRange.Start ?? default;
		TaskViewModel.PlannedEndDate = AddTaskModalDateRange.End ?? default;
		TaskViewModel.AssigneeIds = new(AddTaskModalAssigneeOptions);

		// var response = await ProjectDataService.CreateTaskAsync(TaskViewModel);
		// if (!response.Success) {
		// 	Snackbar.Add($"Failed to create task: {response.GetErrorsString()}", Severity.Error);
		// 	return;
		// }

		// Tasks.Add(new TaskItem(TaskViewModel.Title, addTaskModalFirstSelectOption));
		// isAddTaskModalVisible = false;
		// AddTaskModalAssigneeOptions = new HashSet<string>();
	}


	private void LaunchDeleteSectionModal(TaskSection section) {
		TempSectionToDeleteFromModal = section;
		isOpenDeleteSectionModal = true;
	}

	private async Task DeleteSection() {

		// var result = await ProjectDataService.DeleteSectionAsync(ProjectId, TempSectionToDeleteFromModal!.Name);

		// if (TaskSections.Count == 1) {
		// 	Tasks.Clear();
		// 	TaskSections.Clear();
		// }
		// else {
		// 	int newIndex = TaskSections.IndexOf(section) - 1;
		// 	if (newIndex < 0) {
		// 		newIndex = 0;
		// 	}

		// 	TaskSections.Remove(section);

		// 	var tasks = Tasks.Where(x => x.Status == section.Name);
		// 	foreach (var item in tasks) {
		// 		item.Status = Sections[newIndex].Name;
		// 	}
		// }
	}

	private void LaunchEditProjectInfoModal() {
		//todo
	}

	private void LaunchDeleteProjectModal() {
		//todo
	}
}
