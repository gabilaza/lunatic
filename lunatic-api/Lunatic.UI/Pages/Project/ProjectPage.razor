@page "/project/{projectId}"
@using MudBlazor
@using Lunatic.UI.Contracts
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@inject ISnackbar Snackbar

<style>
	.project-toolbar {
		background-color: #9271bd;
		color: #ffffff;
	}

	.background {
		background-color: #e4e6eb;
	}
</style>

<MudPaper Height="100%" Class="p-2 mr-n2 d-flex flex-column flex-grow-1 " Elevation="0">
	<MudToolBar Class="project-toolbar" Dense="true">
		<MudText Typo="Typo.subtitle1">
			@ProjectName
		</MudText>
		<MudIconButton Icon="@Icons.Material.Filled.ExpandCircleDown"
					   aria-label="delete"
					   OnClick="()=>{isOpenDescriptionPopover=!isOpenDescriptionPopover;}" />
		<MudPopover Open="isOpenDescriptionPopover"
					OverflowBehavior="OverflowBehavior.FlipAlways"
					AnchorOrigin="Origin.BottomLeft"
					TransformOrigin="Origin.TopLeft"
					Paper="false">
			<MudPaper Outlined="true" Class="px-4 py-8 overflow-auto mud-background-gray" MaxHeight="60vh" MaxWidth="80vw" MinWidth="50vw" MinHeight="20vh">
				<MudText>
					@foreach (var sub in @ProjectDescription.Split('\n')) {
						@sub <br />
					}
				</MudText>
			</MudPaper>
		</MudPopover>

		<MudSpacer />
		<MudButtonGroup Color="Color.Default" Size="Size.Small" Variant="Variant.Outlined">
			<MudButton Class="pr-4 pl-4" OnClick="()=>{}">Add Task</MudButton>
			<MudButton OnClick="()=>isAddSectionModalVisible=true">Add Section</MudButton>
		</MudButtonGroup>
		<MudSpacer />
		<MudMenu Icon="@Icons.Material.Filled.Settings" Color="Color.Inherit" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
			@* <MudMenuItem OnClick="LaunchEditTeamInfoModal">
			Edit team info
			</MudMenuItem>
			<MudMenuItem OnClick="LaunchDeleteTeamModal">
			Delete team  @* leave team if non owner
			</MudMenuItem> *@
		</MudMenu>

	</MudToolBar>

	<MudDropContainer T="KanbanTaskItem"
					  @ref="_dropContainer"
					  Items="@_tasks"
					  ItemsSelector="@((item,column) => item.Status == column)"
					  ItemDropped="TaskUpdated"
					  Class="flex-grow-1 d-flex flex-row background">
		<ChildContent>
			<MudPaper Class="d-flex flex-row background overflow-x-scroll" Width="100%" Height="100%">
				@foreach (var item in _sections) {
					<MudPaper Elevation="0" Width="20em" MinWidth="20em" MinHeight="30em" MaxHeight="40em"
							  Class="pa-2 ma-4 d-flex flex-column mud-background-gray rounded-lg">
						<MudToolBar DisableGutters="true" Dense>
							@if (!@item.isEditingCategory) {
								<MudText Typo="Typo.subtitle1" Class="pl-2"><b>@item.Name</b></MudText>
								<MudSpacer />
								<MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
									<MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Outlined.Delete" OnClick="@( () => DeleteSection(item))">Delete Section</MudButton>
									<MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Rounded.Edit" OnClick="@(()=>item.isEditingCategory=true)">Rename Section</MudButton>
								</MudMenu>
							}
							else {
								if (editCategoryNameStr == null) {
									editCategoryNameStr = item.Name;
								}
								Console.WriteLine("editCategoryNameStr: " + editCategoryNameStr);
								<MudTextField T="string"
											  Variant="Variant.Filled"
											  Text="@item.TempName"
											  @bind-Value="@item.TempName"
											  Adornment="Adornment.End"
											  AdornmentIcon="@Icons.Material.Filled.Check"
											  OnAdornmentClick="@(() => {
											  item.Name = item.TempName;
											  item.isEditingCategory=false;
											  // editCategoryNameStr = "";
										  })" />
							}
						</MudToolBar>
						<MudDropZone T="KanbanTaskItem" Identifier="@item.Name" Class="mud-height-full overflow-scroll" />
						@if (item.NewTaskOpen) {
							<MudPaper Elevation="25" Class="pa-2 rounded-lg">
								<MudTextField @bind-Value="item.NewTaskName" Placeholder="New Task" DisableUnderLine="true" Margin="Margin.Dense" Class="mx-2 mt-n2"></MudTextField>
								<MudButton OnClick="@(() => AddTask(item))" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add Task</MudButton>
							</MudPaper>
						}
						else {
							<MudButton OnClick="@(() => item.NewTaskOpen = !item.NewTaskOpen)" StartIcon="@Icons.Material.Filled.Add" FullWidth="true" Class="rounded-lg py-2">Add Task</MudButton>
						}
					</MudPaper>
				}
				@* 				<MudPaper Class="pa-4" Elevation="0" Width="20em">
				@if (_addSectionOpen) {
				<MudPaper Elevation="0" Width="224px" Class="pa-4 d-flex flex-column mud-background-gray rounded-lg">
				<EditForm Model="@newSectionModel" OnValidSubmit="OnValidSectionSubmit">
				<DataAnnotationsValidator />
				<MudTextField @bind-Value="newSectionModel.Name" For="@(() => newSectionModel.Name)" Placeholder="New Section" DisableUnderLine="true"></MudTextField>
				<MudButton ButtonType="ButtonType.Submit" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add Section</MudButton>
				</EditForm>
				</MudPaper>
				}
				else {
				<MudButton OnClick="OpenAddNewSection" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Class="rounded-lg py-2" FullWidth="true">Add Section</MudButton>
				}
				</MudPaper> *@
			</MudPaper>
		</ChildContent>
		<ItemRenderer>
			<MudPaper Elevation="25" Class="pa-4 rounded-lg my-3 d-flex flex-row">
				@context.Name
				<MudButton>goto</MudButton>
			</MudPaper>
		</ItemRenderer>
	</MudDropContainer>


</MudPaper>

<MudDialog @bind-IsVisible="isAddSectionModalVisible">
	<TitleContent>
		<MudText Typo="Typo.body1">
			<MudIcon Icon="@Icons.Material.Filled.AddCard" Class="mr-3" /> Add new section
		</MudText>
	</TitleContent>
	<DialogContent>
		<MudPaper Width="25em" Class="m-0" Elevation="0">
			<MudTextField T="string"
						  Label="Section name"
						  HelperText="You can edit it later"
						  Required="true"
						  Immediate="true"
						  @bind-Value="addSectionName" />
		</MudPaper>
	</DialogContent>
	<DialogActions>
		<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddNewSection" Class="px-10">Add</MudButton>
		<MudButton Variant="Variant.Outlined" Color="Color.Default" OnClick="()=>isAddSectionModalVisible=false">Cancel</MudButton>

	</DialogActions>
</MudDialog>


@code {
	[Parameter] public string? ProjectId { get; set; }
	public string ProjectName { get; set; } = "";
	public string ProjectDescription { get; set; } = "";

	private bool isOpenDescriptionPopover = false;
	private string? editCategoryNameStr = null;

	private bool isAddSectionModalVisible = false;
	private string addSectionName = "";


	[Inject] public IProjectDataService ProjectDataService { get; set; } = null!;



	private MudDropContainer<KanbanTaskItem> _dropContainer;

	private bool _addSectionOpen;
	/* handling board events */
	private void TaskUpdated(MudItemDropInfo<KanbanTaskItem> info) {
		info.Item.Status = info.DropzoneIdentifier;
	}

	/* Setup for board  */
	private List<KanBanSections> _sections = new(){
			new KanBanSections("To Do", false, String.Empty),
			new KanBanSections("In Progress", false, String.Empty),
			new KanBanSections("Done", false, String.Empty),
		};

	public class KanBanSections {
		public string Name { get; set; }
		public string TempName { get; set; }
		public bool NewTaskOpen { get; set; }
		public string NewTaskName { get; set; }
		public bool isEditingCategory { get; set; } = false;

		public KanBanSections(string name, bool newTaskOpen, string newTaskName) {
			Name = name;
			TempName = name;
			NewTaskOpen = newTaskOpen;
			NewTaskName = newTaskName;
		}
	}
	public class KanbanTaskItem {
		public string Name { get; set; }
		public string Status { get; set; }

		public KanbanTaskItem(string name, string status) {
			Name = name;
			Status = status;
		}
	}

	private List<KanbanTaskItem> _tasks = new(){
			new KanbanTaskItem("Write unit test", "To Do"),
			new KanbanTaskItem("Some docu stuff", "To Do"),
			new KanbanTaskItem("Walking the dog", "To Do"),
		};

	KanBanNewForm newSectionModel = new KanBanNewForm();

	public class KanBanNewForm {
		[Required]
		[StringLength(10, ErrorMessage = "Name length can't be more than 10.")]
		public string Name { get; set; }
	}

	private void OnValidSectionSubmit(EditContext context) {
		_sections.Add(new KanBanSections(newSectionModel.Name, false, String.Empty));
		newSectionModel.Name = string.Empty;
		_addSectionOpen = false;
	}

	private void OpenAddNewSection() {
		_addSectionOpen = true;
	}

	private void AddTask(KanBanSections section) {
		_tasks.Add(new KanbanTaskItem(section.NewTaskName, section.Name));
		section.NewTaskName = string.Empty;
		section.NewTaskOpen = false;
		_dropContainer.Refresh();
	}

	private void DeleteSection(KanBanSections section) {
		if (_sections.Count == 1) {
			_tasks.Clear();
			_sections.Clear();
		}
		else {
			int newIndex = _sections.IndexOf(section) - 1;
			if (newIndex < 0) {
				newIndex = 0;
			}

			_sections.Remove(section);

			var tasks = _tasks.Where(x => x.Status == section.Name);
			foreach (var item in tasks) {
				item.Status = _sections[newIndex].Name;
			}
		}
	}
}

@functions {

	protected override async Task OnInitializedAsync() {
		var response = await ProjectDataService.GetProjectByIdAsync(ProjectId);
		if (!response.Success) {
			return;
		}
		var project = response.GetValue("project");
		ProjectName = project.Title;
		ProjectDescription = project.Description;
	}

	private async Task AddNewSection() {
		if (string.IsNullOrEmpty(addSectionName)) {
			Snackbar.Add($"Section name cannot be empty", Severity.Error);
			return;
		}
		_sections.Add(new KanBanSections(addSectionName, false, String.Empty));
		addSectionName = string.Empty;
		isAddSectionModalVisible = false;
	}
}
