@inherits LayoutComponentBase
@using Blazored.LocalStorage
@using Lunatic.UI.Contracts
@using Lunatic.UI.Auth
@using MudBlazor
@inject NavigationManager NavigationManager
@* @inject CustomStateProvider AuthStateProvider *@
@inject ITokenService TokenService
@inject ILocalStorageService LocalStorageService
@inject ISnackbar Snackbar
@inject Blazored.LocalStorage.ILocalStorageService LocalStorageService

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

@*color scheme not yet in place*@
<MudLayout>
	<MudAppBar Color="Color.Dark" Fixed="true" Dense>
		<MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" />
		<MudButton Color="Color.Inherit" OnClick="GoToTeams"> My Teams</MudButton>
		<MudSpacer />
		@if (@LoggedIn) {
			<MudMenu FullWidth="true" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
				<ActivatorContent>
					<MudChip Size="Size.Large">
						<AvatarContent>
							<MudAvatar>
								<MudImage Src="images/dog.jpg"></MudImage>
							</MudAvatar>
						</AvatarContent>
						<ChildContent>
							<MudText Typo="Typo.body2" Color="Color.Info">
								@Username
							</MudText>
						</ChildContent>
					</MudChip>
				</ActivatorContent>
				<ChildContent>
					<MudMenuItem OnAction="@(()=>NavigationManager.NavigateTo($"/profile/{Username}"))">Profile</MudMenuItem>
					<MudMenuItem OnAction="@(()=>NavigationManager.NavigateTo("/logout"))">Sign Out</MudMenuItem>
				</ChildContent>
			</MudMenu>
		}
		@* 		else {
		<MudButton Color="Color.Inherit" OnClick="GoToLogin">Login</MudButton>
		} *@
	</MudAppBar>


	<MudMainContent style="height:100vh; overflow-y:scroll; overflow-x:hidden;">
		@Body
	</MudMainContent>

</MudLayout>

@code {
	private bool LoggedIn { get; set; } = false;
	private string? RegisterUri { get; set; }
	private string? LoginUri { get; set; }
	private string? Token { get; set; }

	private bool UserDataLoadedFlag { get; set; } = false;
	private string? Username { get; set; }
	private string? UserId { get; set; }

	[Inject] IUserDataService UserDataService { get; set; } = null!;
}

@functions {

	private async Task DisplayUserChip() {
		if (!UserDataLoadedFlag && UserId!=null) {

			var response = await UserDataService.GetUserByIdAsync(UserId);
			if (!response.Success) {
				Snackbar.Add($"Couldn't load user data: {response.Message}", Severity.Error);
				return;
			}

			var userData = response.GetValue("user");

			Username = userData.Username;
			//user image, get from cache or make request

			UserDataLoadedFlag = true;
		}
	}

	//https://learn.microsoft.com/en-us/aspnet/core/blazor/components/lifecycle?view=aspnetcore-8.0
	//OnInitializedAsync is called after OnParametersSetAsync
	// protected override async Task OnInitializedAsync() {
	// }

	protected override async Task OnParametersSetAsync() {
		if (Token == null){
			try {
				Token = await TokenService.GetTokenAsync();
			}
			catch (Exception e) {
				Snackbar.Add($"Error loading your JWT from localstorage, it's not my fault! Error: {e.Message}", Severity.Error);
				// NavigationManager.NavigateTo("/login");
			}

		}
		if (UserId == null) {
			try {
				UserId = await LocalStorageService.GetItemAsync<string>("userId");
			}
			catch (Exception e) {
				Snackbar.Add($"Error loading your user id from localstorage, it's not my fault! Error: {e.Message}", Severity.Error);
				// NavigationManager.NavigateTo("/login");
			}
		}

		if (RegisterUri == null)
			RegisterUri = NavigationManager.ToAbsoluteUri("/register").ToString();
		if (LoginUri == null)
			LoginUri = NavigationManager.ToAbsoluteUri("/login").ToString();

		string uri = NavigationManager.Uri;

		if (Token == null || UserId == null) {
			LoggedIn = false;
			if (!uri.Equals(RegisterUri, StringComparison.OrdinalIgnoreCase) &&
				!uri.Equals(LoginUri, StringComparison.OrdinalIgnoreCase))
				NavigationManager.NavigateTo("/login");
		}
		else {
			LoggedIn = true;
			await DisplayUserChip();
		}

	}

	public void GoToTeams() {
		NavigationManager.NavigateTo("/teams");
	}
	public void GoToLogin() {
		NavigationManager.NavigateTo("/login");
	}
}
